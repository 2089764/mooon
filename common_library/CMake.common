# Writed by yijian (eyjian@qq.com, eyjian@gmail.com)
# 定义公共的、可直接复用的

# 让make时显示编译命令
set(CMAKE_VERBOSE_MAKEFILE ON)

# 定义颜色值，message()时可用到
if (NOT WIN32)
    string(ASCII 27 Esc)
    set(ColourReset "${Esc}[m")
    set(ColourBold  "${Esc}[1m")
    set(Red         "${Esc}[31m")
    set(Green       "${Esc}[32m")
    set(Yellow      "${Esc}[33m")
    set(Blue        "${Esc}[34m")
    set(Magenta     "${Esc}[35m")
    set(Cyan        "${Esc}[36m")
    set(White       "${Esc}[37m")
    set(BoldRed     "${Esc}[1;31m")
    set(BoldGreen   "${Esc}[1;32m")
    set(BoldYellow  "${Esc}[1;33m")
    set(BoldBlue    "${Esc}[1;34m")
    set(BoldMagenta "${Esc}[1;35m")
    set(BoldCyan    "${Esc}[1;36m")
    set(BoldWhite   "${Esc}[1;37m")
endif ()

#
# 只要MySQL、Boost、Thrift等安装在下述三个目录，即可自动发现：
# 1) /usr/local/thirdparty
# 2) /usr/local
# 3) 用户主目录，即环境变量$HOME对应的目录
#

# MySQL
if (EXISTS /usr/local/thirdparty/mysql)
    set(HAVE_MYSQL 1)
    set(MYSQL_HOME /usr/local/thirdparty/mysql)    
elseif (EXISTS /usr/local/mysql)
    set(HAVE_MYSQL 1)
    set(MYSQL_HOME /usr/local/mysql)
elseif (EXISTS $ENV{HOME}/mysql)
    set(HAVE_MYSQL 1)
    set(MYSQL_HOME $ENV{HOME}/mysql)
else ()
    set(HAVE_MYSQL 0)
endif ()
if (NOT HAVE_MYSQL)
    message("${Green}not found MySQL${ColourReset}")    
else ()
    message("${Red}MySQL found in ${MYSQL_HOME}${ColourReset}")
    add_definitions("-DHAVE_MYSQL=1")
    include_directories(${MYSQL_HOME}/include)
    link_directories(${MYSQL_HOME}/lib)
    #link_libraries(libmysqlclient_r.a)
endif ()

# SQLite3
if (EXISTS /usr/local/thirdparty/sqlite3)
    set(HAVE_SQLITE3 1)
    set(SQLITE3_HOME /usr/local/thirdparty/sqlite3)    
elseif (EXISTS /usr/local/sqlite3)
    set(HAVE_SQLITE3 1)
    set(SQLITE3_HOME /usr/local/sqlite3)
elseif (EXISTS $ENV{HOME}/sqlite3)
    set(HAVE_SQLITE3 1)
    set(MYSQL_HOME $ENV{HOME}/sqlite3)
else ()
    set(HAVE_SQLITE3 0)
endif ()
if (NOT HAVE_SQLITE3)
    message("${Green}not found SQLite3${ColourReset}")
else ()
    message("${Red}SQLite3 found in ${SQLITE3_HOME}${ColourReset}")
    add_definitions("-DHAVE_SQLITE3=1")
    include_directories(${SQLITE3_HOME}/include)
    link_directories(${SQLITE3_HOME}/lib)
    #link_libraries(libsqlite3.a)
endif ()

# Curl
if (EXISTS /usr/local/thirdparty/curl)
    set(HAVE_CURL 1)
    set(CURL_HOME /usr/local/thirdparty/curl)    
elseif (EXISTS /usr/local/curl)
    set(HAVE_CURL 1)
    set(CURL_HOME /usr/local/curl)
elseif (EXISTS $ENV{HOME}/curl)
    set(HAVE_CURL 1)
    set(CURL_HOME $ENV{HOME}/curl)
else ()
    set(HAVE_CURL 0)
endif ()
if (NOT HAVE_CURL)
    message("${Green}not found Curl${ColourReset}")
else ()
    message("${Red}Curl found in ${CURL_HOME}${ColourReset}")
    add_definitions("-DHAVE_CURL=1")
    include_directories(${CURL_HOME}/include)
    link_directories(${CURL_HOME}/lib)
    #link_libraries(libcurl.a)
endif ()

# Cgicc
if (EXISTS /usr/local/thirdparty/cgicc)
    set(HAVE_CGICC 1)
    set(CGICC_HOME /usr/local/thirdparty/cgicc)    
elseif (EXISTS /usr/local/cgicc)
    set(HAVE_CGICC 1)
    set(CGICC_HOME /usr/local/cgicc)
elseif (EXISTS $ENV{HOME}/cgicc)
    set(HAVE_CGICC 1)
    set(CGICC_HOME $ENV{HOME}/cgicc)
else ()
    set(HAVE_CGICC 0)
endif ()
if (NOT HAVE_CGICC)
    message("${Green}not found Cgicc${ColourReset}")
else ()
    message("${Red}Cgicc found in ${CGICC_HOME}${ColourReset}")
    add_definitions("-DHAVE_CGICC=1")
    include_directories(${CGICC_HOME}/include)
    link_directories(${CGICC_HOME}/lib)
    #link_libraries(libcgicc.a)
endif ()
  
# Sparsehash
if (EXISTS /usr/local/thirdparty/sparsehash)
    set(HAVE_SPARSE_HASH 1)
    set(SPARSE_HASH_HOME /usr/local/thirdparty/sparsehash)    
elseif (EXISTS /usr/local/sparsehash)
    set(HAVE_SPARSE_HASH 1)
    set(SPARSE_HASH_HOME /usr/local/sparsehash)
elseif (EXISTS $ENV{HOME}/sparsehash)
    set(HAVE_SPARSE_HASH 1)
    set(SPARSE_HASH_HOME $ENV{HOME}/sparsehash)
else ()
    set(HAVE_SPARSE_HASH 0)
endif ()
if (NOT HAVE_SPARSE_HASH)
    message("${Green}not found Sparsehash${ColourReset}")
else ()
    message("${Red}Sparsehash found in ${SPARSE_HASH_HOME}${ColourReset}")
    add_definitions("-DHAVE_SPARSE_HASH=1")
    include_directories(${SPARSE_HASH_HOME}/include)
    link_directories(${SPARSE_HASH_HOME}/lib)
    # Sparsehash只有头文件
endif ()

# Libevent
if (EXISTS /usr/local/thirdparty/libevent)
    set(HAVE_LIBEVENT 1)
    set(LIBEVENT_HOME /usr/local/thirdparty/libevent)    
elseif (EXISTS /usr/local/libevent)
    set(HAVE_LIBEVENT 1)
    set(LIBEVENT_HOME /usr/local/libevent)
elseif (EXISTS $ENV{HOME}/libevent)
    set(HAVE_LIBEVENT 1)
    set(LIBEVENT_HOME $ENV{HOME}/libevent)
else ()
    set(HAVE_LIBEVENT 0)
endif ()
if (NOT HAVE_LIBEVENT)
    message("${Green}not found Libevent${ColourReset}")
else ()
    message("${Red}Libevent found in ${LIBEVENT_HOME}${ColourReset}")
    add_definitions("-DHAVE_LIBEVENT=1")
    include_directories(${LIBEVENT_HOME}/include)
    link_directories(${LIBEVENT_HOME}/lib)
    #link_libraries(libevent.a)
endif ()

# libssh2
# http://www.libssh2.org/
# libssh
# http://www.libssh.org/
if (EXISTS /usr/local/thirdparty/libssh2)
    set(HAVE_LIBSSH2 1)
    set(LIBSSH2_HOME /usr/local/thirdparty/libssh2)    
elseif (EXISTS /usr/local/libssh2)
    set(HAVE_LIBSSH2 1)
    set(LIBSSH2_HOME /usr/local/libssh2)
elseif (EXISTS $ENV{HOME}/libssh2)
    set(HAVE_LIBSSH2 1)
    set(LIBSSH2_HOME $ENV{HOME}/libssh2)
else ()
    set(HAVE_LIBSSH2 0)
endif ()
if (NOT HAVE_LIBSSH2)
    message("${Green}not found libssh2 (www.libssh2.org)${ColourReset}")
else ()
    message("${Red}libssh2 found in ${LIBSSH2_HOME}${ColourReset}")
    add_definitions("-DHAVE_LIBSSH2=1")
    include_directories(${LIBSSH2_HOME}/include)
    link_directories(${LIBSSH2_HOME}/lib)
    #link_libraries(libssh2.a)
endif ()

# Boost
if (EXISTS /usr/local/thirdparty/boost)
    set(HAVE_BOOST 1)
    set(BOOST_HOME /usr/local/thirdparty/boost)    
elseif (EXISTS /usr/local/boost)
    set(HAVE_BOOST 1)
    set(BOOST_HOME /usr/local/boost)
elseif (EXISTS $ENV{HOME}/boost)
    set(HAVE_BOOST 1)
    set(BOOST_HOME $ENV{HOME}/boost)
else ()
    set(HAVE_BOOST 0)
endif ()
if (NOT HAVE_BOOST)
    message("${Green}not found Boost${ColourReset}")
else ()
    message("${Red}Boost found in ${BOOST_HOME}${ColourReset}")
    add_definitions("-DHAVE_BOOST=1")
    include_directories(${BOOST_HOME}/include)
    link_directories(${BOOST_HOME}/lib)
    #link_libraries(libboost_filesystem.a libboost_thread.a libboost_system.a libboost_date_time.a)
endif ()

# Thrift
if (EXISTS /usr/local/thirdparty/thrift)
    set(HAVE_THRIFT 1)
    set(THRIFT_HOME /usr/local/thirdparty/thrift)    
elseif (EXISTS /usr/local/thrift)
    set(HAVE_THRIFT 1)
    set(THRIFT_HOME /usr/local/thrift)
elseif (EXISTS $ENV{HOME}/thrift)
    set(HAVE_THRIFT 1)
    set(THRIFT_HOME $ENV{HOME}/thrift)
else ()
    set(HAVE_THRIFT 0)
endif ()
if (NOT HAVE_THRIFT)
    message("${Green}not found Thrift${ColourReset}")
else ()
    message("${Red}Thrift found in ${THRIFT_HOME}${ColourReset}")
    add_definitions("-DHAVE_THRIFT=1")
    include_directories(${THRIFT_HOME}/include)
    link_directories(${THRIFT_HOME}/lib)
    #link_libraries(libthriftnb.a libthrift.a)
endif ()

# jsoncpp
if (EXISTS /usr/local/thirdparty/jsoncpp)
    set(HAVE_JSONCPP 1)
    set(JSONCPP_HOME /usr/local/thirdparty/jsoncpp)    
elseif (EXISTS /usr/local/jsoncpp)
    set(HAVE_JSONCPP 1)
    set(JSONCPP_HOME /usr/local/jsoncpp)
elseif (EXISTS $ENV{HOME}/jsoncpp)
    set(HAVE_JSONCPP 1)
    set(JSONCPP_HOME $ENV{HOME}/jsoncpp)
else ()
    set(HAVE_JSONCPP 0)
endif ()
if (NOT HAVE_JSONCPP)
    message("${Green}not found jsoncpp${ColourReset}")
else ()
    message("${Red}jsoncpp found in ${JSONCPP_HOME}${ColourReset}")
    add_definitions("-DHAVE_JSONCPP=1")
    include_directories(${JSONCPP_HOME}/include)
    link_directories(${JSONCPP_HOME}/lib)
    #link_libraries(libjsoncpp.a)
endif ()

# rapidjson
if (EXISTS /usr/local/thirdparty/rapidjson)
    set(HAVE_RAPIDJSON 1)
    set(RAPIDJSON_HOME /usr/local/thirdparty/rapidjson)    
elseif (EXISTS /usr/local/rapidjson)
    set(HAVE_RAPIDJSON 1)
    set(RAPIDJSON_HOME /usr/local/rapidjson)
elseif (EXISTS $ENV{HOME}/jsoncpp)
    set(HAVE_RAPIDJSON 1)
    set(RAPIDJSON_HOME $ENV{HOME}/rapidjson)
else ()
    set(HAVE_RAPIDJSON 0)
endif ()
if (NOT HAVE_RAPIDJSON)
    message("${Green}not found rapidjson${ColourReset}")
else ()
    message("${Red}rapidjson found in ${RAPIDJSON_HOME}${ColourReset}")
    add_definitions("-DHAVE_RAPIDJSON=1")
    include_directories(${RAPIDJSON_HOME}/include)
    link_directories(${RAPIDJSON_HOME}/lib)
    # rapidjson纯头文件，没有库文件
endif ()

# OpenSSL
if (EXISTS /usr/local/thirdparty/openssl)
    set(HAVE_OPENSSL 1)
    set(OPENSSL_HOME /usr/local/thirdparty/openssl)    
elseif (EXISTS /usr/local/openssl)
    set(HAVE_OPENSSL 1)
    set(OPENSSL_HOME /usr/local/openssl)
elseif (EXISTS $ENV{HOME}/openssl)
    set(HAVE_OPENSSL 1)
    set(OPENSSL_HOME $ENV{HOME}/openssl)
else ()
    set(HAVE_OPENSSL 0)
endif ()
if (NOT HAVE_OPENSSL)
    message("${Green}not found OpenSSL${ColourReset}")
else ()
    message("${Red}OpenSSL found in ${OPENSSL_HOME}${ColourReset}")
    add_definitions("-DHAVE_OPENSSL=1")
    include_directories(${OPENSSL_HOME}/include)
    link_directories(${OPENSSL_HOME}/lib)
    #link_libraries(libssl.a libcrypto.a)
endif ()

# Protocol Buffers
if (EXISTS /usr/local/thirdparty/protobuf)
    set(HAVE_PROTOBUF 1)
    set(PROTOBUF_HOME /usr/local/thirdparty/protobuf)    
elseif (EXISTS /usr/local/protobuf)
    set(HAVE_PROTOBUF 1)
    set(PROTOBUF_HOME /usr/local/protobuf)
elseif (EXISTS $ENV{HOME}/protobuf)
    set(HAVE_PROTOBUF 1)
    set(PROTOBUF_HOME $ENV{HOME}/protobuf)
else ()
    set(HAVE_PROTOBUF 0)
endif ()
if (NOT HAVE_PROTOBUF)
    message("${Green}not found Protocol Buffers${ColourReset}")
else ()
    message("${Red}Protocol Buffers found in ${PROTOBUF_HOME}${ColourReset}")
    add_definitions("-DHAVE_PROTOBUF=1")
    include_directories(${PROTOBUF_HOME}/include)
    link_directories(${PROTOBUF_HOME}/lib)
    #link_libraries(libprotobuf.a)
endif ()

# 编译参数
add_definitions("-Wall -fPIC -pthread -D_GNU_SOURCE -D__STDC_FORMAT_MACROS")

# 代码中如有使用到atomic，则和-march有关
if (CMAKE_SIZEOF_VOID_P EQUAL 4)
    add_definitions("-march=pentium4")    
endif ()

link_libraries(dl pthread rt z)
